[project]
name = "tinygrad-demo"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    "numpy>=2.3.3",
    "safetensors>=0.6.2",
    "tinygrad>=0.11.0",
    "transformers>=4.56.1",
    "sentencepiece>=0.1.99",
    "tiktoken>=0.5.0",
    "blobfile>=2.0.0",
    "huggingface-hub>=0.34.4",
    "torch>=2.0.0",
]

[project.optional-dependencies]
dev = [
    "ruff>=0.8.0",
    "pre-commit>=3.0.0",
    "bandit[toml]>=1.8.0",
]

[tool.ruff]
# Set the maximum line length to 120 characters
line-length = 120
indent-width = 4
target-version = "py312"

# Include Python files
include = ["*.py", "*.pyi"]
extend-exclude = [
    "extra/models/*.py",  # Exclude tinygrad model files
    "__pycache__",
    ".git",
    ".venv",
    ".tox",
    "build",
    "dist",
]

[tool.ruff.lint]
# Enable comprehensive linting rules
select = [
    # Pyflakes (basic errors)
    "F",
    # pycodestyle (PEP 8 style)
    "E", "W",
    # mccabe (complexity)
    "C90",
    # isort (import sorting)
    "I",
    # pydocstyle (docstring conventions)
    "D",
    # pyupgrade (upgrade syntax)
    "UP",
    # flake8-bugbear (common bugs)
    "B",
    # flake8-simplify (code simplification)
    "SIM",
    # flake8-comprehensions (better comprehensions)
    "C4",
    # flake8-pie (unnecessary pass, etc.)
    "PIE",
    # flake8-unused-arguments (unused function arguments)
    "ARG",
    # flake8-use-pathlib (prefer pathlib)
    "PTH",
    # flake8-todos (TODO/FIXME comments)
    "TD",
    # flake8-fixme (FIXME comments)
    "FIX",
    # Ruff-specific rules
    "RUF",
    # flake8-logging-format (logging best practices)
    "G",
    # flake8-print (avoid print statements in production)
    "T20",
    # flake8-return (return statement improvements)
    "RET",
    # flake8-self (private member access)
    "SLF",
    # tryceratops (exception handling)
    "TRY",
    # flake8-raise (raise statement improvements)
    "RSE",
    # pandas-vet (pandas best practices)
    "PD",
    # NumPy-specific rules
    "NPY",
]

# Rules to ignore
ignore = [
    # Ignore docstring requirements for now
    "D100", "D101", "D102", "D103", "D104", "D105", "D106", "D107",
    "D200", "D201", "D202", "D203", "D204", "D205", "D206", "D207", "D208", "D209",
    "D210", "D211", "D212", "D213", "D214", "D215",
    "D400", "D401", "D402", "D403", "D404", "D405", "D406", "D407", "D408", "D409",
    "D410", "D411", "D412", "D413", "D414", "D415", "D416", "D417", "D418", "D419",

    # Allow print statements (useful for ML scripts)
    "T201", "T203",

    # Allow TODO comments without issue links
    "TD002", "TD003",

    # Allow magic numbers (common in ML)
    "PLR2004",

    # Allow complex functions (ML code can be complex)
    "C901", "PLR0912", "PLR0913", "PLR0915",

    # Allow long variable names (descriptive in ML)
    "SLF001",

    # Allow complex lambda expressions (needed for ML timing code)
    "PLR0915",

    # Allow subprocess without shell=False check
    "S602", "S603", "S607",
]

# Allow fix for all enabled rules
fixable = ["ALL"]
unfixable = []

# Allow unused variables when they start with an underscore
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
# Ignore import errors in __init__.py files
"__init__.py" = ["F401"]
# Allow print statements in scripts
"llama3.py" = ["T201"]
"inference.py" = ["T201", "C901", "PLR0912", "PLR0913", "PLR0915"]
"benchmark.py" = ["T201"]
"gpt2.py" = ["T201"]

[tool.ruff.lint.isort]
known-first-party = ["tokenizer", "quantization", "model_config", "web_api", "generation", "benchmark", "chat_interface"]
combine-as-imports = true
split-on-trailing-comma = true

[tool.ruff.lint.mccabe]
max-complexity = 15

[tool.ruff.format]
# Use double quotes for strings
quote-style = "double"
# Use spaces instead of tabs
indent-style = "space"
# Respect magic trailing comma
skip-magic-trailing-comma = false
# Automatically detect line ending
line-ending = "auto"

[tool.bandit]
# Bandit security linting configuration
exclude_dirs = ["tests", "extra/models", ".venv", "build", "dist"]
skips = [
    "B101",  # assert_used - allow assert statements
    "B601",  # paramiko_calls - allow paramiko usage
    "B602",  # subprocess_popen_with_shell_equals_true - handled by ruff S602
    "B603",  # subprocess_without_shell_equals_false - handled by ruff S603
    "B607",  # start_process_with_partial_path - handled by ruff S607
]
